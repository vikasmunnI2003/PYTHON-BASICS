# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BP-u8pROJ4ZQxpNw78I8NR-PTo_2mJ5A

PRACTICAL QUESTIONS

QUS 1 :- Write a Python program to print "Hello, World
"""

print("hello world!!")

"""QUS :- Write a Python program that displays your name and age"""

name = "Vikas Kumar"
age = 25

print("My name is", name)
print("I am", age, "years old")

"""QUS 3:- Write code to print all the pre-defined keywords in Python using the keyword library

"""

import keyword

# Get all keywords
keywords_list = keyword.kwlist

# Print the keywords
print("Python predefined keywords are:")
for kw in keywords_list:
    print(kw)

"""QUS 4:-  Write a program that checks if a given word is a Python keyword"""

import keyword

# Ask the user to enter a word
word = input("Enter a word to check if it's a Python keyword: ")

# Check if the word is a keyword
if keyword.iskeyword(word):
    print(f"'{word}' is a Python keyword.")
else:
    print(f"'{word}' is NOT a Python keyword.")

"""QUS 5:-  Create a list and tuple in Python, and demonstrate how attempting to change an element works differently
for each.
"""

my_list = [10, 20, 30]
my_tuple = (10, 20, 30)

# Changing an element in the list
print("Original list:", my_list)
my_list[1] = 99
print("Modified list:", my_list)

# Attempting to change an element in the tuple
print("\nOriginal tuple:", my_tuple)
try:
    my_tuple[1] = 99
except TypeError as e:
    print("Error:", e)

"""QUS 6:- Write a function to demonstrate the behavior of mutable and immutable arguments"""

def modify_arguments(num, num_list):
    print("\nInside function (before modification):")
    print("num =", num)
    print("num_list =", num_list)

    # Try modifying both arguments
    num += 10              # Immutable (int)
    num_list.append(99)    # Mutable (list)

    print("\nInside function (after modification):")
    print("num =", num)
    print("num_list =", num_list)


# Immutable argument (int)
a = 5

# Mutable argument (list)
b = [1, 2, 3]

print("Before function call:")
print("a =", a)
print("b =", b)

# Call the function
modify_arguments(a, b)

print("\nAfter function call:")
print("a =", a)
print("b =", b)

"""QUS 7:-  Write a program that performs basic arithmetic operations on two user-input numbers"""

# Program to perform basic arithmetic operations

# Get input from user
num1 = float(input("Enter first number: "))
num2 = float(input("Enter second number: "))

# Perform operations
addition = num1 + num2
subtraction = num1 - num2
multiplication = num1 * num2

# Handle division by zero
if num2 != 0:
    division = num1 / num2
else:
    division = "Undefined (cannot divide by zero)"

# Display results
print("\nResults:")
print("Addition:", addition)
print("Subtraction:", subtraction)
print("Multiplication:", multiplication)
print("Division:", division)

"""QUS 8:-Write a program to demonstrate the use of logical operators."""

# Program to demonstrate logical operators

# Get input from user
a = int(input("Enter first number: "))
b = int(input("Enter second number: "))

# Logical AND
print("\nLogical AND:")
if a > 0 and b > 0:
    print("Both numbers are positive.")
else:
    print("At least one number is not positive.")

# Logical OR
print("\nLogical OR:")
if a > 0 or b > 0:
    print("At least one number is positive.")
else:
    print("Both numbers are not positive.")

# Logical NOT
print("\nLogical NOT:")
print("NOT (a > 0):", not (a > 0))
print("NOT (b > 0):", not (b > 0))

"""QUS 9:- Write a Python program to convert user input from string to integer, float, and boolean types."""

# Program to convert user input to int, float, and bool

# Get input from user as string
user_input = input("Enter a value: ")

# Convert to integer
try:
    int_value = int(user_input)
    print("Integer value:", int_value)
except ValueError:
    print("Cannot convert to integer.")

# Convert to float
try:
    float_value = float(user_input)
    print("Float value:", float_value)
except ValueError:
    print("Cannot convert to float.")

# Convert to boolean
# Note: In Python, an empty string is False; anything else is True
bool_value = bool(user_input)
print("Boolean value:", bool_value)

"""QUS 10:-  Write code to demonstrate type casting with list elements."""

# Program to demonstrate type casting with list elements

# List of strings representing numbers
str_list = ["10", "20", "30", "40"]

# Convert string elements to integers
int_list = [int(x) for x in str_list]
print("Converted to integers:", int_list)

# Convert integers to floats
float_list = [float(x) for x in int_list]
print("Converted to floats:", float_list)

# Convert integers to strings again (for demo)
str_again_list = [str(x) for x in int_list]
print("Converted back to strings:", str_again_list)

# Convert numbers to boolean (0 → False, others → True)
bool_list = [bool(x) for x in int_list]
print("Converted to booleans:", bool_list)

"""QUS 11:- Write a program that checks if a number is positive, negative, or zero."""

# Program to check if a number is positive, negative, or zero

# Get input from the user
num = float(input("Enter a number: "))

# Check the number's sign
if num > 0:
    print("The number is positive.")
elif num < 0:
    print("The number is negative.")
else:
    print("The number is zero.")

"""QUS 12 :-  Write a for loop to print numbers from 1 to 10."""

# Program to print numbers from 1 to 10 using a for loop

for i in range(1, 11):
    print(i)

"""QUS 13 :-  Write a Python program to find the sum of all even numbers between 1 and 50."""

# Program to find the sum of even numbers between 1 and 50

even_sum = 0

for i in range(2, 51, 2):  # Start from 2, go up to 50, step by 2 (even numbers)
    even_sum += i

print("The sum of even numbers from 1 to 50 is:", even_sum)

"""QUS 14:-  Write a program to reverse a string using a while loop.

"""

# Program to reverse a string using a while loop

# Get input from user
original = input("Enter a string: ")

# Initialize variables
reversed_str = ""
index = len(original) - 1

# Loop backwards through the string
while index >= 0:
    reversed_str += original[index]
    index -= 1

# Display the result
print("Reversed string:", reversed_str)

"""QUS 15:-  Write a Python program to calculate the factorial of a number provided by the user using a while loop."""

num = int(input("Enter a non-negative integer: "))

# Validate input
if num < 0:
    print("Factorial is not defined for negative numbers.")
else:
    factorial = 1
    i = 1

    while i <= num:
        factorial *= i
        i += 1

    print(f"The factorial of {num} is: {factorial}")

"""PYTHON BASICS QUESTION

PLEASE HELP ME SIR / MAM

QUS 1 :- (i)WHAT IS PYTHON AND WHY IS IT POPULAR ANS :-PYTHON IS A HIGH LEVEL INTERPERTED PROGRAMING LANGUAGE KNOW FOTR ITS SIMPLICITY READABILTY AND IT WAS CRESTED BY GUIDO VAN ROSSUM IS THE FIRST PEROSON FIND 1991 1 :-INTERPRETED 2:- HIGH LEVEL 3:- DYNAMICALLY TYPED 4:- MULTI PRAADIGM (ii) WHY IS IT POPULAR
1 SIMPLE AND READABLE
2 VERSATILITY 3 LARGE STANDARD LIBRARY 4 MASSIVE COMMUNITY SUPPORT 5 CROSS PLATFOM

QUS 2 :- WHAT IS AN INTERPRETER IN PYTHON ANS An interpreter is a program that reads and executes your Python code line by line, instead of compiling the entire program into machine code first (like in C or JAVA ) 1 :- READS 2 :- converts 3 :- executes

QUS 3 :- WHAT ARE PRE DEFINED KEYBOARD IN PYTHON

ANS :- False await else import pass None break except in raise True class finally is return and continue for lambda try as def from nonlocal while assert del global not with async elif if or yield

QUS 4 :- CAN KEYBOARD BE USED AS VARIABLE NAMES ANS :- KEYBOARD, LANGUAGES, AND KEYBOARD CAN BE USED AS VARIABLE NAMES, BUT IT DEPENDS ON THE RULES OF THE LANGUAGE YOU ARE USING. WE CAN USE THEM IN LANGUAGES LIKE PYTHON, JAVA, JAVASCRIPT, AND C++. AVOID USING NAMES LIKE KEYBOARD, MOUSE, INPUT, OR FILE AS VARIABLES IF THEY ARE ALSO USED IN LIBRARIES OR BUILT-INS. PICK MORE DESCRIPTIVE OR UNIQUE NAMES LIKE KEYBOARD_BRAND, KEYBOARD_INPUT, ETC

QUS 5 :- What is Mutability in Python ANS :- MUTABILITY REFERS TO WHETHER AN OBJECT CAN BE CHANGED AFTER IT IS CREATED LIKE WE USE A PYTHON AND EX i LIST ii DICT iii SET ALL IS THE PYTHON EX LIST = ( 1,2,3) DICT = ("A":1 ,"B": 2) SET = (`1,2,3)

QUS 6 :- WHY ARE LISTS MUTBLE BUT TUPLES ARE IMMUTABLE LIST TUPLE ANS :- MUTABLE YES NO SYNTAX [1,2,3,] (1,2,3,) HASHABLE NO YES
COMMON USE DYNAMIC DATA FIXED DATA DICT KEYS METHODS MANY(APPEND , POP ) FEW (COUNT ,INDEX) SO, THE MUTABILITY OF LISTS ALLOWS FOR FLEXIBILITY, WHILE THE IMMUTABILITY OF TUPLES ENSURES RELIABILITY AND CONSISTENCY. PYTHON GIVES BOTH SO YOU CAN CHOOSE THE RIGHT ONE FOR YOUR USE CASE.

QUS 7:- WHAT IS THE DEFFERENCE BETWEEN == AND IS OPERATORS IN PYTHON i EQUALITY OPERATOR CHECKS IF TWO VALUES ARE EQUAL IN CONTENT IT COMPARES THE DATA INSIDE THE OBJECTS IT WORKS EVEN IF THE OBJECTS ARE IN DIFFERENT MEMORY LOCATIONS II IDENTITY OPERATOR
CHECKS IF TWO VARIABLES POINTS TO THE EXACT SAME OBJECT IN MEMORY IT COMPARES THE IDENTITY NOT THE CONTENT USEFUL WHEN YOU WANT TO SEE IF TWO NAME REFER TO THE SAME OBJECT NOT JUST EQUIVALENT ONES == VALUE (VALUSE ARE EQUAL ) IS IDENTITY (BOTH VARIABLES POINTS TO THE SAME OBJECT IN MEMMORY )

QUS8 :- WHAT ARE LOGICAL OPERATORS IN PYTHON ANS :- TRUE AND TRUE → TRUE TRUE AND FALSE → FALSE FALSE OR TRUE → TRUE FALSE OR FALSE → FALSE NOT TRUE → FALSE NOT FALSE → TRUE

QUS 9:- WHAT IS TYPE CASTING IN PYTHON ANS :- CASTING :- TYPE CASTING IN PYTHON MEANS CONVERTING ONE DATA TYPE INTO
ANOTHER (i) TO MAKE SURE VARIABLES ARE IN THE RIGHT FORMAT FOR OPERATIONS. (ii) TO AVOID TYPE ERRORS (E.G., ADDING A NUMBER TO A STRING). (iii) TO CONVERT USER INPUT (WHICH IS USUALLY A STRING) INTO NUMBERS.
:- TYPE CASTING IS THE PROCESS OF CHANGING THE DATA TYPE OF A VARIABLE USING BUILT-IN FUNCTIONS LIKE INT(), FLOAT(), STR(), ETC. LET ME KNOW IF YOU WANT A CHEAT SHEET OR EXAMPLES INVOLVING USER INPUT!

QUS 10:- WHAT IS THE DIFFERENCE BETWEEN IMPLICIT AND EXPLICIT TYPE CASTING ANS :- (i) IMPLICIT TYPE CASTING (AUTOMATIC) (!) ONE BY PYTHON AUTOMATICALLY (ii) NO CODE REQUIRED TO CONVERT THE DATA TYPE (iii) HAPPENS WHEN PYTHON SAFELY CONVERTS ONE TYPE TO ANOTHER WITHOUT LOSING DATA (ii) EXPLICIT TYPE CASTING (MANUAL) YOU CONTROL THE CONVERSION USE BUILT-IN FUNCTIONS: INT(), FLOAT(), STR(), ETC. NEEDED WHEN PYTHON CAN’T SAFELY CONVERT TYPES ON ITS OWN

QUS 11:- WHAT IS THE PURPOSE OF CONDITIONAL STATEMENT IN PYTHON ANS :- WHAT IS THE PURPOSE OF CONDITIONAL STATEMENTS IN PYTHON? CONDITIONAL STATEMENTS IN PYTHON ARE USED TO: MAKE DECISIONS IN CODE BASED ON CERTAIN CONDITIONS. EXECUTE SPECIFIC BLOCKS OF CODE ONLY IF A GIVEN CONDITION IS TRUE. CONTROL THE FLOW OF PROGRAM BY ALLOWING DIFFERENT OUTCOMES BASED ON INPUT OR LOGIC. ENABLE BRANCHING, SO YOUR PROGRAM CAN RESPOND DIFFERENTLY TO DIFFERENT SITUATIONS. SO ARE USEING PYTHON WE KONOW THIS AGE = 18 IF AGE >= 18: PRINT(YOU ARE AN ADULT) ELSE PRINT (YOU ARE A MONIR)

:- THE PURPOSE OF CONDITIONAL STATEMENTS IS TO ALLOW PROGRAMS TO TAKE DIFFERENT PATHS BASED ON WHETHER CONDITIONS ARE TRUE OR FALSE.

QUS 12:- HOW DOES THE ELIF STATEMENT WORK
ANS :- TO CHECK ANOTHER CONDITION IF THE PREVIOUS ONE IS FALSE USED WHEN YOU HAVE MORE THAN TWO OPTIONS HELPS AVOID WRITING MULTIPLE NESTED IF...ELSE BLOCKS PYTHON CHECKS EACH CONDITION IN ORDER. IT STOPS CHECKING AS SOON AS ONE CONDITION IS TRUE. YOU CAN HAVE MULTIPLE ELIF STATEMENTS, BUT ONLY ONE IF AND ONE ELSE (OPTIONAL).

QUS 13 :- WHAT IS THE DIFFERENCE BETWEEN FOR AND WHILE LOOPS ANS :- i FOR LOOP (I) USED WHEN YOU KNOW HOW MANY TIMES YOU WANT TO LOOP. (ii)ITERATES OVER A SEQUENCE (LIKE A LIST, STRING, RANGE, ETC.). (iii) BEST FOR FIXED REPETITION ii WHILE LOOP USED WHEN YOU DON'T KNOW HOW MANY TIMES TO LOOP. RUNS AS LONG AS A CONDITION REMAINS TRUE. BEST FOR LOOPING UNTIL A CONDITION CHANGES.

QUS 14 :- DESCRIBE A SCENARIO WHERE A WHILE LOOPS IS MORE SUITABLE THAN A FOR LOOPS ANS :- YOU DON’T KNOW HOW MANY ATTEMPTS THE USER WILL NEED. THE LOOP RUNS UNTIL A CONDITION BECOMES FALSE (USER_INPUT != CORRECT_PASSWORD). A FOR LOOP WOULDN'T MAKE SENSE HERE BECAUSE THERE'S NO FIXED NUMBER OF REPETITIONS.
"""